"use strict";export const DdnsConfig = validate10;const schema11 = {"$id":"DdnsConfig","$ref":"#/definitions/Config","$schema":"http://json-schema.org/draft-07/schema#","definitions":{"CloudflareConfig":{"additionalProperties":false,"properties":{"apiToken":{"$ref":"#/definitions/Variable"},"proxied":{"anyOf":[{"$ref":"#/definitions/Variable%3Cboolean%3E"},{"type":"null"}],"description":"Whether to enable proxy. If not specified, update will not overwrite existing setting and create will use the Cloudflare default."},"ttl":{"anyOf":[{"$ref":"#/definitions/Variable%3Cnumber%3E"},{"type":"null"}],"description":"The Time To Live in seconds to be set on DNS records. If not specified, update will not set TTL and create will use automatic TTL."},"zoneId":{"$ref":"#/definitions/Variable"}},"required":["apiToken","zoneId"],"type":"object"},"CloudflareProviderConfig":{"additionalProperties":false,"properties":{"config":{"$ref":"#/definitions/CloudflareConfig"},"name":{"const":"Cloudflare","type":"string"}},"required":["name","config"],"type":"object"},"Config":{"additionalProperties":false,"description":"Schema for the configuration that powers the custom DDNS executors.","properties":{"configs":{"description":"The list of configs makes it possible to update multiple domains across multiple providers. See <http://github.com/MatthiasKunnen/custom-ddns/config.yaml>.","items":{"additionalProperties":false,"properties":{"authPassword":{"$ref":"#/definitions/Variable","description":"The password that is used to authenticate the update request."},"hosts":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"description":"The fully qualified domain names that should have their DNS records updated.","examples":[["sub.example.com","domain.eu"]]},"provider":{"$ref":"#/definitions/CloudflareProviderConfig","description":"The name of the provider to use."},"tag":{"description":"When specified, this limits this config item to only be executed when this tag is specified in the update query params.","type":["string","null"]},"useHostsFromRequest":{"default":false,"description":"When true, any hostname specified in the request will be updated. Is combined with the `hosts` property.","type":["boolean","null"]}},"required":["provider","authPassword"],"type":"object"},"type":"array"}},"required":["configs"],"type":"object"},"Variable":{"anyOf":[{"type":"string"},{"additionalProperties":false,"properties":{"from":{"const":"Env","description":"Where to get the variable from.","type":"string"},"name":{"description":"The name of the variable.","type":"string"}},"required":["from","name"],"type":"object"}]},"Variable<boolean>":{"anyOf":[{"type":"boolean"},{"additionalProperties":false,"properties":{"from":{"const":"Env","description":"Where to get the variable from.","type":"string"},"name":{"description":"The name of the variable.","type":"boolean"}},"required":["from","name"],"type":"object"}]},"Variable<number>":{"anyOf":[{"type":"number"},{"additionalProperties":false,"properties":{"from":{"const":"Env","description":"Where to get the variable from.","type":"string"},"name":{"description":"The name of the variable.","type":"number"}},"required":["from","name"],"type":"object"}]}}};const schema12 = {"additionalProperties":false,"description":"Schema for the configuration that powers the custom DDNS executors.","properties":{"configs":{"description":"The list of configs makes it possible to update multiple domains across multiple providers. See <http://github.com/MatthiasKunnen/custom-ddns/config.yaml>.","items":{"additionalProperties":false,"properties":{"authPassword":{"$ref":"#/definitions/Variable","description":"The password that is used to authenticate the update request."},"hosts":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"description":"The fully qualified domain names that should have their DNS records updated.","examples":[["sub.example.com","domain.eu"]]},"provider":{"$ref":"#/definitions/CloudflareProviderConfig","description":"The name of the provider to use."},"tag":{"description":"When specified, this limits this config item to only be executed when this tag is specified in the update query params.","type":["string","null"]},"useHostsFromRequest":{"default":false,"description":"When true, any hostname specified in the request will be updated. Is combined with the `hosts` property.","type":["boolean","null"]}},"required":["provider","authPassword"],"type":"object"},"type":"array"}},"required":["configs"],"type":"object"};const schema13 = {"anyOf":[{"type":"string"},{"additionalProperties":false,"properties":{"from":{"const":"Env","description":"Where to get the variable from.","type":"string"},"name":{"description":"The name of the variable.","type":"string"}},"required":["from","name"],"type":"object"}]};const schema14 = {"additionalProperties":false,"properties":{"config":{"$ref":"#/definitions/CloudflareConfig"},"name":{"const":"Cloudflare","type":"string"}},"required":["name","config"],"type":"object"};const schema15 = {"additionalProperties":false,"properties":{"apiToken":{"$ref":"#/definitions/Variable"},"proxied":{"anyOf":[{"$ref":"#/definitions/Variable%3Cboolean%3E"},{"type":"null"}],"description":"Whether to enable proxy. If not specified, update will not overwrite existing setting and create will use the Cloudflare default."},"ttl":{"anyOf":[{"$ref":"#/definitions/Variable%3Cnumber%3E"},{"type":"null"}],"description":"The Time To Live in seconds to be set on DNS records. If not specified, update will not set TTL and create will use automatic TTL."},"zoneId":{"$ref":"#/definitions/Variable"}},"required":["apiToken","zoneId"],"type":"object"};const schema17 = {"anyOf":[{"type":"boolean"},{"additionalProperties":false,"properties":{"from":{"const":"Env","description":"Where to get the variable from.","type":"string"},"name":{"description":"The name of the variable.","type":"boolean"}},"required":["from","name"],"type":"object"}]};const schema18 = {"anyOf":[{"type":"number"},{"additionalProperties":false,"properties":{"from":{"const":"Env","description":"Where to get the variable from.","type":"string"},"name":{"description":"The name of the variable.","type":"number"}},"required":["from","name"],"type":"object"}]};function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.apiToken === undefined) && (missing0 = "apiToken")) || ((data.zoneId === undefined) && (missing0 = "zoneId"))){validate13.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "apiToken") || (key0 === "proxied")) || (key0 === "ttl")) || (key0 === "zoneId"))){validate13.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.apiToken !== undefined){let data0 = data.apiToken;const _errs2 = errors;const _errs4 = errors;let valid2 = false;const _errs5 = errors;if(typeof data0 !== "string"){const err0 = {instancePath:instancePath+"/apiToken",schemaPath:"#/definitions/Variable/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}var _valid0 = _errs5 === errors;valid2 = valid2 || _valid0;if(!valid2){const _errs7 = errors;if(errors === _errs7){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing1;if(((data0.from === undefined) && (missing1 = "from")) || ((data0.name === undefined) && (missing1 = "name"))){const err1 = {instancePath:instancePath+"/apiToken",schemaPath:"#/definitions/Variable/anyOf/1/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}else {const _errs9 = errors;for(const key1 in data0){if(!((key1 === "from") || (key1 === "name"))){const err2 = {instancePath:instancePath+"/apiToken",schemaPath:"#/definitions/Variable/anyOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;break;}}if(_errs9 === errors){if(data0.from !== undefined){let data1 = data0.from;const _errs10 = errors;if(typeof data1 !== "string"){const err3 = {instancePath:instancePath+"/apiToken/from",schemaPath:"#/definitions/Variable/anyOf/1/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}if("Env" !== data1){const err4 = {instancePath:instancePath+"/apiToken/from",schemaPath:"#/definitions/Variable/anyOf/1/properties/from/const",keyword:"const",params:{allowedValue: "Env"},message:"must be equal to constant"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data0.name !== undefined){const _errs12 = errors;if(typeof data0.name !== "string"){const err5 = {instancePath:instancePath+"/apiToken/name",schemaPath:"#/definitions/Variable/anyOf/1/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}var valid3 = _errs12 === errors;}else {var valid3 = true;}}}}}else {const err6 = {instancePath:instancePath+"/apiToken",schemaPath:"#/definitions/Variable/anyOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs7 === errors;valid2 = valid2 || _valid0;}if(!valid2){const err7 = {instancePath:instancePath+"/apiToken",schemaPath:"#/definitions/Variable/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;validate13.errors = vErrors;return false;}else {errors = _errs4;if(vErrors !== null){if(_errs4){vErrors.length = _errs4;}else {vErrors = null;}}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.proxied !== undefined){let data3 = data.proxied;const _errs14 = errors;const _errs15 = errors;let valid4 = false;const _errs16 = errors;const _errs18 = errors;let valid6 = false;const _errs19 = errors;if(typeof data3 !== "boolean"){const err8 = {instancePath:instancePath+"/proxied",schemaPath:"#/definitions/Variable%3Cboolean%3E/anyOf/0/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}var _valid2 = _errs19 === errors;valid6 = valid6 || _valid2;if(!valid6){const _errs21 = errors;if(errors === _errs21){if(data3 && typeof data3 == "object" && !Array.isArray(data3)){let missing2;if(((data3.from === undefined) && (missing2 = "from")) || ((data3.name === undefined) && (missing2 = "name"))){const err9 = {instancePath:instancePath+"/proxied",schemaPath:"#/definitions/Variable%3Cboolean%3E/anyOf/1/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}else {const _errs23 = errors;for(const key2 in data3){if(!((key2 === "from") || (key2 === "name"))){const err10 = {instancePath:instancePath+"/proxied",schemaPath:"#/definitions/Variable%3Cboolean%3E/anyOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;break;}}if(_errs23 === errors){if(data3.from !== undefined){let data4 = data3.from;const _errs24 = errors;if(typeof data4 !== "string"){const err11 = {instancePath:instancePath+"/proxied/from",schemaPath:"#/definitions/Variable%3Cboolean%3E/anyOf/1/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}if("Env" !== data4){const err12 = {instancePath:instancePath+"/proxied/from",schemaPath:"#/definitions/Variable%3Cboolean%3E/anyOf/1/properties/from/const",keyword:"const",params:{allowedValue: "Env"},message:"must be equal to constant"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}var valid7 = _errs24 === errors;}else {var valid7 = true;}if(valid7){if(data3.name !== undefined){const _errs26 = errors;if(typeof data3.name !== "boolean"){const err13 = {instancePath:instancePath+"/proxied/name",schemaPath:"#/definitions/Variable%3Cboolean%3E/anyOf/1/properties/name/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}var valid7 = _errs26 === errors;}else {var valid7 = true;}}}}}else {const err14 = {instancePath:instancePath+"/proxied",schemaPath:"#/definitions/Variable%3Cboolean%3E/anyOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid2 = _errs21 === errors;valid6 = valid6 || _valid2;}if(!valid6){const err15 = {instancePath:instancePath+"/proxied",schemaPath:"#/definitions/Variable%3Cboolean%3E/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}else {errors = _errs18;if(vErrors !== null){if(_errs18){vErrors.length = _errs18;}else {vErrors = null;}}}var _valid1 = _errs16 === errors;valid4 = valid4 || _valid1;if(!valid4){const _errs28 = errors;if(data3 !== null){const err16 = {instancePath:instancePath+"/proxied",schemaPath:"#/properties/proxied/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}var _valid1 = _errs28 === errors;valid4 = valid4 || _valid1;}if(!valid4){const err17 = {instancePath:instancePath+"/proxied",schemaPath:"#/properties/proxied/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;validate13.errors = vErrors;return false;}else {errors = _errs15;if(vErrors !== null){if(_errs15){vErrors.length = _errs15;}else {vErrors = null;}}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.ttl !== undefined){let data6 = data.ttl;const _errs30 = errors;const _errs31 = errors;let valid8 = false;const _errs32 = errors;const _errs34 = errors;let valid10 = false;const _errs35 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){const err18 = {instancePath:instancePath+"/ttl",schemaPath:"#/definitions/Variable%3Cnumber%3E/anyOf/0/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}var _valid4 = _errs35 === errors;valid10 = valid10 || _valid4;if(!valid10){const _errs37 = errors;if(errors === _errs37){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing3;if(((data6.from === undefined) && (missing3 = "from")) || ((data6.name === undefined) && (missing3 = "name"))){const err19 = {instancePath:instancePath+"/ttl",schemaPath:"#/definitions/Variable%3Cnumber%3E/anyOf/1/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}else {const _errs39 = errors;for(const key3 in data6){if(!((key3 === "from") || (key3 === "name"))){const err20 = {instancePath:instancePath+"/ttl",schemaPath:"#/definitions/Variable%3Cnumber%3E/anyOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;break;}}if(_errs39 === errors){if(data6.from !== undefined){let data7 = data6.from;const _errs40 = errors;if(typeof data7 !== "string"){const err21 = {instancePath:instancePath+"/ttl/from",schemaPath:"#/definitions/Variable%3Cnumber%3E/anyOf/1/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}if("Env" !== data7){const err22 = {instancePath:instancePath+"/ttl/from",schemaPath:"#/definitions/Variable%3Cnumber%3E/anyOf/1/properties/from/const",keyword:"const",params:{allowedValue: "Env"},message:"must be equal to constant"};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}var valid11 = _errs40 === errors;}else {var valid11 = true;}if(valid11){if(data6.name !== undefined){let data8 = data6.name;const _errs42 = errors;if(!((typeof data8 == "number") && (isFinite(data8)))){const err23 = {instancePath:instancePath+"/ttl/name",schemaPath:"#/definitions/Variable%3Cnumber%3E/anyOf/1/properties/name/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}var valid11 = _errs42 === errors;}else {var valid11 = true;}}}}}else {const err24 = {instancePath:instancePath+"/ttl",schemaPath:"#/definitions/Variable%3Cnumber%3E/anyOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid4 = _errs37 === errors;valid10 = valid10 || _valid4;}if(!valid10){const err25 = {instancePath:instancePath+"/ttl",schemaPath:"#/definitions/Variable%3Cnumber%3E/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}else {errors = _errs34;if(vErrors !== null){if(_errs34){vErrors.length = _errs34;}else {vErrors = null;}}}var _valid3 = _errs32 === errors;valid8 = valid8 || _valid3;if(!valid8){const _errs44 = errors;if(data6 !== null){const err26 = {instancePath:instancePath+"/ttl",schemaPath:"#/properties/ttl/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}var _valid3 = _errs44 === errors;valid8 = valid8 || _valid3;}if(!valid8){const err27 = {instancePath:instancePath+"/ttl",schemaPath:"#/properties/ttl/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;validate13.errors = vErrors;return false;}else {errors = _errs31;if(vErrors !== null){if(_errs31){vErrors.length = _errs31;}else {vErrors = null;}}}var valid0 = _errs30 === errors;}else {var valid0 = true;}if(valid0){if(data.zoneId !== undefined){let data9 = data.zoneId;const _errs46 = errors;const _errs48 = errors;let valid13 = false;const _errs49 = errors;if(typeof data9 !== "string"){const err28 = {instancePath:instancePath+"/zoneId",schemaPath:"#/definitions/Variable/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}var _valid5 = _errs49 === errors;valid13 = valid13 || _valid5;if(!valid13){const _errs51 = errors;if(errors === _errs51){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){let missing4;if(((data9.from === undefined) && (missing4 = "from")) || ((data9.name === undefined) && (missing4 = "name"))){const err29 = {instancePath:instancePath+"/zoneId",schemaPath:"#/definitions/Variable/anyOf/1/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}else {const _errs53 = errors;for(const key4 in data9){if(!((key4 === "from") || (key4 === "name"))){const err30 = {instancePath:instancePath+"/zoneId",schemaPath:"#/definitions/Variable/anyOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;break;}}if(_errs53 === errors){if(data9.from !== undefined){let data10 = data9.from;const _errs54 = errors;if(typeof data10 !== "string"){const err31 = {instancePath:instancePath+"/zoneId/from",schemaPath:"#/definitions/Variable/anyOf/1/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}if("Env" !== data10){const err32 = {instancePath:instancePath+"/zoneId/from",schemaPath:"#/definitions/Variable/anyOf/1/properties/from/const",keyword:"const",params:{allowedValue: "Env"},message:"must be equal to constant"};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}var valid14 = _errs54 === errors;}else {var valid14 = true;}if(valid14){if(data9.name !== undefined){const _errs56 = errors;if(typeof data9.name !== "string"){const err33 = {instancePath:instancePath+"/zoneId/name",schemaPath:"#/definitions/Variable/anyOf/1/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}var valid14 = _errs56 === errors;}else {var valid14 = true;}}}}}else {const err34 = {instancePath:instancePath+"/zoneId",schemaPath:"#/definitions/Variable/anyOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid5 = _errs51 === errors;valid13 = valid13 || _valid5;}if(!valid13){const err35 = {instancePath:instancePath+"/zoneId",schemaPath:"#/definitions/Variable/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;validate13.errors = vErrors;return false;}else {errors = _errs48;if(vErrors !== null){if(_errs48){vErrors.length = _errs48;}else {vErrors = null;}}}var valid0 = _errs46 === errors;}else {var valid0 = true;}}}}}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate13.errors = vErrors;return errors === 0;}function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.name === undefined) && (missing0 = "name")) || ((data.config === undefined) && (missing0 = "config"))){validate12.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "config") || (key0 === "name"))){validate12.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.config !== undefined){const _errs2 = errors;if(!(validate13(data.config, {instancePath:instancePath+"/config",parentData:data,parentDataProperty:"config",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs3 = errors;if(typeof data1 !== "string"){validate12.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if("Cloudflare" !== data1){validate12.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/const",keyword:"const",params:{allowedValue: "Cloudflare"},message:"must be equal to constant"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}}}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.configs === undefined) && (missing0 = "configs")){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(key0 === "configs")){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.configs !== undefined){let data0 = data.configs;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if(((data1.provider === undefined) && (missing1 = "provider")) || ((data1.authPassword === undefined) && (missing1 = "authPassword"))){validate11.errors = [{instancePath:instancePath+"/configs/" + i0,schemaPath:"#/properties/configs/items/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs6 = errors;for(const key1 in data1){if(!(((((key1 === "authPassword") || (key1 === "hosts")) || (key1 === "provider")) || (key1 === "tag")) || (key1 === "useHostsFromRequest"))){validate11.errors = [{instancePath:instancePath+"/configs/" + i0,schemaPath:"#/properties/configs/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs6 === errors){if(data1.authPassword !== undefined){let data2 = data1.authPassword;const _errs7 = errors;const _errs9 = errors;let valid4 = false;const _errs10 = errors;if(typeof data2 !== "string"){const err0 = {instancePath:instancePath+"/configs/" + i0+"/authPassword",schemaPath:"#/definitions/Variable/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}var _valid0 = _errs10 === errors;valid4 = valid4 || _valid0;if(!valid4){const _errs12 = errors;if(errors === _errs12){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){let missing2;if(((data2.from === undefined) && (missing2 = "from")) || ((data2.name === undefined) && (missing2 = "name"))){const err1 = {instancePath:instancePath+"/configs/" + i0+"/authPassword",schemaPath:"#/definitions/Variable/anyOf/1/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}else {const _errs14 = errors;for(const key2 in data2){if(!((key2 === "from") || (key2 === "name"))){const err2 = {instancePath:instancePath+"/configs/" + i0+"/authPassword",schemaPath:"#/definitions/Variable/anyOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;break;}}if(_errs14 === errors){if(data2.from !== undefined){let data3 = data2.from;const _errs15 = errors;if(typeof data3 !== "string"){const err3 = {instancePath:instancePath+"/configs/" + i0+"/authPassword/from",schemaPath:"#/definitions/Variable/anyOf/1/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}if("Env" !== data3){const err4 = {instancePath:instancePath+"/configs/" + i0+"/authPassword/from",schemaPath:"#/definitions/Variable/anyOf/1/properties/from/const",keyword:"const",params:{allowedValue: "Env"},message:"must be equal to constant"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}var valid5 = _errs15 === errors;}else {var valid5 = true;}if(valid5){if(data2.name !== undefined){const _errs17 = errors;if(typeof data2.name !== "string"){const err5 = {instancePath:instancePath+"/configs/" + i0+"/authPassword/name",schemaPath:"#/definitions/Variable/anyOf/1/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}var valid5 = _errs17 === errors;}else {var valid5 = true;}}}}}else {const err6 = {instancePath:instancePath+"/configs/" + i0+"/authPassword",schemaPath:"#/definitions/Variable/anyOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs12 === errors;valid4 = valid4 || _valid0;}if(!valid4){const err7 = {instancePath:instancePath+"/configs/" + i0+"/authPassword",schemaPath:"#/definitions/Variable/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;validate11.errors = vErrors;return false;}else {errors = _errs9;if(vErrors !== null){if(_errs9){vErrors.length = _errs9;}else {vErrors = null;}}}var valid2 = _errs7 === errors;}else {var valid2 = true;}if(valid2){if(data1.hosts !== undefined){let data5 = data1.hosts;const _errs19 = errors;const _errs20 = errors;let valid6 = false;const _errs21 = errors;if(errors === _errs21){if(Array.isArray(data5)){var valid7 = true;const len1 = data5.length;for(let i1=0; i1<len1; i1++){const _errs23 = errors;if(typeof data5[i1] !== "string"){const err8 = {instancePath:instancePath+"/configs/" + i0+"/hosts/" + i1,schemaPath:"#/properties/configs/items/properties/hosts/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}var valid7 = _errs23 === errors;if(!valid7){break;}}}else {const err9 = {instancePath:instancePath+"/configs/" + i0+"/hosts",schemaPath:"#/properties/configs/items/properties/hosts/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid1 = _errs21 === errors;valid6 = valid6 || _valid1;if(!valid6){const _errs25 = errors;if(data5 !== null){const err10 = {instancePath:instancePath+"/configs/" + i0+"/hosts",schemaPath:"#/properties/configs/items/properties/hosts/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}var _valid1 = _errs25 === errors;valid6 = valid6 || _valid1;}if(!valid6){const err11 = {instancePath:instancePath+"/configs/" + i0+"/hosts",schemaPath:"#/properties/configs/items/properties/hosts/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;validate11.errors = vErrors;return false;}else {errors = _errs20;if(vErrors !== null){if(_errs20){vErrors.length = _errs20;}else {vErrors = null;}}}var valid2 = _errs19 === errors;}else {var valid2 = true;}if(valid2){if(data1.provider !== undefined){const _errs27 = errors;if(!(validate12(data1.provider, {instancePath:instancePath+"/configs/" + i0+"/provider",parentData:data1,parentDataProperty:"provider",rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid2 = _errs27 === errors;}else {var valid2 = true;}if(valid2){if(data1.tag !== undefined){let data8 = data1.tag;const _errs28 = errors;if((typeof data8 !== "string") && (data8 !== null)){validate11.errors = [{instancePath:instancePath+"/configs/" + i0+"/tag",schemaPath:"#/properties/configs/items/properties/tag/type",keyword:"type",params:{type: schema12.properties.configs.items.properties.tag.type},message:"must be string,null"}];return false;}var valid2 = _errs28 === errors;}else {var valid2 = true;}if(valid2){if(data1.useHostsFromRequest !== undefined){let data9 = data1.useHostsFromRequest;const _errs30 = errors;if((typeof data9 !== "boolean") && (data9 !== null)){validate11.errors = [{instancePath:instancePath+"/configs/" + i0+"/useHostsFromRequest",schemaPath:"#/properties/configs/items/properties/useHostsFromRequest/type",keyword:"type",params:{type: schema12.properties.configs.items.properties.useHostsFromRequest.type},message:"must be boolean,null"}];return false;}var valid2 = _errs30 === errors;}else {var valid2 = true;}}}}}}}}else {validate11.errors = [{instancePath:instancePath+"/configs/" + i0,schemaPath:"#/properties/configs/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate11.errors = [{instancePath:instancePath+"/configs",schemaPath:"#/properties/configs/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="DdnsConfig" */;let vErrors = null;let errors = 0;if(!(validate11(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}validate10.errors = vErrors;return errors === 0;}